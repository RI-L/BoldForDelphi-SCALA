<!DOCTYPE DLUnitDoc>
<DLUnitDoc ExplicitSummary="true" Version="$Header: /BfD/Source/Common/Core/BoldDefs.UnitDoc 16    02-06-26 15:03 Isje $">
   <Classes>
      <Class Name="EBold">
         <Summary>The mother of all exceptions used inside Bold. </Summary>
         <Desc>You may use this type to check for exceptions generated by Bold.</Desc>
      </Class>
      <Class Name="EBoldAssertionFailed">
         <Summary>Bold Exception class</Summary>
         <Desc>Raised when a user defined constraint is violated.</Desc>
      </Class>
      <Class Name="EBoldBadColumnIndex">
         <Summary>Bold Exception class</Summary>
         <Desc>Exception generated when attempting to access a column outside the legal range (index "out of bound").</Desc>
      </Class>
      <Class Name="EBoldBadRepresentation">
         <Summary>Bold Exception class</Summary>
         <Desc></Desc>
      </Class>
      <Class Name="EBoldDesignTime">
         <Summary>Bold Exception class</Summary>
         <Desc>Exception generated at designtime.</Desc>
      </Class>
      <Class Name="EBoldEnsureDatabaseLockError">
         <Summary>Bold Exception class</Summary>
         <Desc>Raised when an attempt to get a database lock fails. For details on database locks, see <See Class="TBoldSnooperHandle" Property="CheckDatabaseLocks"/> </Desc>
      </Class>
      <Class Name="EBoldFeatureNotImplementedYet">
         <Summary>Bold Exception class</Summary>
         <Desc>Exception generated when attempting to invoke a method not yet implemented. </Desc>
      </Class>
      <Class Name="EBoldImport">
         <Summary>Bold Exception class</Summary>
         <Desc>Exception generated when importing a model.</Desc>
      </Class>
      <Class Name="EBoldInternal">
         <Summary>Bold Exception class</Summary>
         <Desc>Exception generated from internal errors in Bold.</Desc>
      </Class>
      <Class Name="EBoldInvalidSOAP">
         <Summary>Bold Exception class</Summary>
         <Desc></Desc>
      </Class>
      <Class Name="EBoldLicenseError">
         <Summary>Bold Exception class</Summary>
         <Desc>Raised if there is something wrong with the runtime deployment license.</Desc>
      </Class>
      <Class Name="EBoldLockManagerError">
         <Summary>Bold Exception class</Summary>
         <Desc></Desc>
      </Class>
      <Class Name="EBoldXMLIncorrectXPath">
         <Summary>Bold Exception class</Summary>
         <Desc></Desc>
      </Class>
      <Class Name="EBoldXMLLoadError">
         <Summary>Bold Exception class</Summary>
         <Desc>This is the exception class for attempts to load in valid XML data into a Dom document.  <InlineCode>EBoldXMLLoadError</InlineCode> is raised when a Bold framework class tries to load an invalid XML string into a DOM document.</Desc>
      </Class>
   </Classes>
   <Constants>
      <Const Name="AID_CLASSIDREQUIRED_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="AID_CLASSNAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="AID_TABLENAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="ALLFILESFILTER">
         <Summary></Summary>
         <Desc>The ALLFILESFILTER is used internally to append to the filefilter in various file dialogs. </Desc>
      </Const>
      <Const Name="AllInstancesMappingTable_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDCLASSIDNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDCR">
         <Summary></Summary>
         <Desc>BOLDCR is used internally for carriage return.</Desc>
      </Const>
      <Const Name="BOLDCRLF">
         <Summary></Summary>
         <Desc>BOLDCRLF is used internally for carriage return + line feed.</Desc>
      </Const>
      <Const Name="BOLDDEFAULTIDNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDDIRSEPARATOR">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDESC">
         <Summary></Summary>
         <Desc>BOLDESC is used internally for the Escape character.</Desc>
      </Const>
      <Const Name="BOLDIDTRANSLATIONLISTNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDINTERNALIDNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDINVALIDTIMESTAMP">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDLF">
         <Summary></Summary>
         <Desc><InlineCode>BOLDLF</InlineCode> is used internally for a Line Feed character.</Desc>
      </Const>
      <Const Name="BOLDMAXTIMESTAMP">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDMEMBERIDLISTNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDMEMBERIDNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDNULL">
         <Summary></Summary>
         <Desc> <InlineCode>BOLDNULL</InlineCode> is used internally when testing for character 0.</Desc>
      </Const>
      <Const Name="BOLDOBJECTCONTENTSNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDOBJECTIDLISTNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDROSETOOLPAGENAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDTIMESTAMPEDDEFAULTIDNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDTVPREFIX">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLDVALUESPACENAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BOLD_HOST_IDE">
         <Summary>Name of host IDE.</Summary>
         <Desc>This constant is defined to <Strong>Delphi</Strong>, <Strong>C++Builder</Strong> or <Strong>Kylix</Strong>, depending on which platform this release was compiled for.</Desc>
      </Const>
      <Const Name="BOLD_HOST_IDE_REGISTRYPATH">
         <Summary>Path to registry settings for host IDE</Summary>
         <Desc>This constant defines the registry path to settings of the current host IDE.</Desc>
      </Const>
      <Const Name="BoldContentName_Blob">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_Boolean">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_Currency">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_Date">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_DateTime">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_Float">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_Integer">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_ObjectIdListRef">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_ObjectIdListRefPair">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_ObjectIdRef">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_ObjectIdRefPair">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_String">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_Time">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="BoldContentName_TypedBlob">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="CLASSNAMECOLUMN_NAME">
         <Summary></Summary>
         <Desc>The <InlineCode>CLASSNAMECOLUMN_NAME</InlineCode> is used in the <See Const="TYPETABLE_NAME"/> for storing the class name information. </Desc>
      </Const>
      <Const Name="CLOCKLOGTABLE_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="DEFAULTNAME">
         <Summary></Summary>
         <Desc><InlineCode>DEFAULTNAME</InlineCode> is used internally to indicate that one internally named instance is to be regarded as default. </Desc>
      </Const>
      <Const Name="DEFAULTNAMELITTERAL">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="DEFAULTTABLEPREFIX">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="E_NOINTERFACE">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="GLOBALIDCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="IDCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="IDCOLUMN_SQLTYPE">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="IDTABLE_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="INTERNALNULLKEY">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="LASTCLOCKCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="LASTCLOCKTABLE_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="LASTTIMESTAMPCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="LanguageNameDelphi">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MMT_CLASSNAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MMT_COLUMNS_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MMT_MAPPERNAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MMT_MEMBERNAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MMT_TABLENAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MODELVERSIONCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="MemberMappingTable_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="NOTVALIDCLIENTID">
         <Summary>Id used until a client has received a valid ClientId</Summary>
         <Desc>A Client (primarily with respect to the ObjectSpace Synchronization Server) that has not yet connected (or failed to connect) will have this ClientId</Desc>
      </Const>
      <Const Name="NO_CLASS">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="OBJECTTABLE_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="ONE_SECOND">
         <Summary>Defines the number of milliseconds in a minute</Summary>
         <Desc></Desc>
      </Const>
      <Const Name="ObjectStorageMappingTable_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="PROPAGATOR_PARAMETER_DELIMITER_CHAR">
         <Summary>Used when sending events to the propagator to separate the actual event from its parameters.</Summary>
         <Desc></Desc>
      </Const>
      <Const Name="READONLYCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="SIXTY_SECONDS">
         <Summary>Defines the amount of milliseconds in a minute</Summary>
         <Desc></Desc>
      </Const>
      <Const Name="SQLDialectAnsi">
         <Summary>Default ANSI dialect name</Summary>
         <Desc></Desc>
      </Const>
      <Const Name="ST_CLASSNAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="ST_TABLENAME_COLUMN">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="S_FALSE">
         <Summary>Definition of S_OK for Delphi 5/C++-Builder 5 compatibility.</Summary>
         <Desc>This constant is defined here to avoid having to include the Windows unit in older versions of Delphi/BCB.</Desc>
      </Const>
      <Const Name="S_OK">
         <Summary>Definition of S_OK for Delphi 5/C++-Builder 5 compatibility.</Summary>
         <Desc>This constant is defined here to avoid having to include the Windows unit in older versions of Delphi/BCB.</Desc>
      </Const>
      <Const Name="TABLENAMECOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TABLEPREFIXTAG">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TABLETABLE_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="THIRTY_MINUTES">
         <Summary>Defines the number of milliseconds in 30 minutes</Summary>
         <Desc></Desc>
      </Const>
      <Const Name="THISCLOCKCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="THISTIMESTAMPCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TIMESTAMPCOLUMN_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TIMESTAMPSTARTCOLUMNNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TIMESTAMPSTOPCOLUMNNAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TIMESTAMPTABLE_NAME">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TYPECOLUMN_NAME">
         <Summary></Summary>
         <Desc>The <InlineCode>TYPECOLUMN_NAME</InlineCode> is used to name the column in all tables that stores the type identifier of the object. </Desc>
      </Const>
      <Const Name="TYPECOLUMN_SQLTYPE">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="TYPETABLE_NAME">
         <Summary></Summary>
         <Desc>The <InlineCode>TYPETABLE_NAME</InlineCode> is used for an internal table in the persistent storage. The table is used to map class identifiers to class names. </Desc>
      </Const>
      <Const Name="UNASSIGNEDID">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="beConnected">
         <Summary>Internal use</Summary>
         <Desc>Is sent as an event when a lock manager is connected. Is used upon propagation and concurrency control.</Desc>
      </Const>
      <Const Name="beDisconnected">
         <Summary>Internal use</Summary>
         <Desc>Is sent as an event when listener is disconnected. Is used upon propagation and concurrency control.</Desc>
      </Const>
      <Const Name="beDisconnecting">
         <Summary>Internal use</Summary>
         <Desc>Is sent as an event when listener is about to be disconnected. Is used upon propagation and concurrency control.</Desc>
      </Const>
      <Const Name="beModified">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="brDefault">
         <Summary></Summary>
         <Desc>The representations (<InlineCode>TBoldRepresentation</InlineCode>) can be used to present something, e.g. a date value in different formats. </Desc>
      </Const>
      <Const Name="brLong">
         <Summary></Summary>
         <Desc>The representations (<InlineCode>TBoldRepresentation</InlineCode>) can be used to present something, e.g. a date value in different formats. </Desc>
      </Const>
      <Const Name="brShort">
         <Summary></Summary>
         <Desc>The representations (<InlineCode>TBoldRepresentation</InlineCode>) can be used to present something, e.g. a date value in different formats. </Desc>
      </Const>
      <Const Name="fmCompare">
         <Summary></Summary>
         <Desc></Desc>
      </Const>
      <Const Name="fmDistributable">
         <Summary></Summary>
         <Desc>When sent as a parameter to the persistence mechanism, it means to fetch all members of an object that are stored with the object. It will also fetch the externally valid identifier of the object. </Desc>
      </Const>
      <Const Name="fmNormal">
         <Summary></Summary>
         <Desc>When sent as a parameter to the persistence mechanism, it means to fetch all members of an object that are not flagged with delayed fetch. </Desc>
      </Const>
   </Constants>
   <Interfaces>
   </Interfaces>
   <Summary>Unit for common defintions</Summary>
   <Desc>This unit contains constants and type declarations that are used in more that one subsystem of Bold. For historical reasons it also contains declarations that could be moved to a more specific place in the architecture. This may be done in a future release of Bold.</Desc>
   <Types>
      <Type Name="IInterface">
         <Summary>Definition of IInterface for Delphi 5/C++-Builder 5 compatibility.</Summary>
         <Desc>In newer versions of Delphi/BCB <InlineCode>IInterface</InlineCode> is the ultimate parent of interfaces. However in older versions <InlineCode>IUnknown</InlineCode> is. In versions of Bold for for older environments <InlineCode>IInterface</InlineCode> is defined as an alias to <InlineCode>IUnknown</InlineCode>, allowing <InlineCode>IInterface</InlineCode> to be used in the Bold code.</Desc>
      </Type>
      <Type Name="TBoldAbstractionLevel">
         <Summary> Values </Summary>
         <Desc>This type is used to denote a <See Class="TBoldMember"/> subclass as being conctrete (i.e. "usable") or abstract (i.e. "must be subclassed").</Desc>
         <Enumeration>
            <EnumItem Name="alAbstract">
               <Desc>Class should not be instantiated.</Desc>
            </EnumItem>
            <EnumItem Name="alConcrete">
               <Desc> Class may be instantiated.</Desc>
            </EnumItem>
         </Enumeration>
      </Type>
      <Type Name="TBoldBooleanFunction">
         <Summary></Summary>
         <Desc>TBoldBooleanFunction is used for method pointers (event handler) that require a function without parameters returning a Boolean value. </Desc>
      </Type>
      <Type Name="TBoldByteSet">
         <Summary></Summary>
         <Desc>A set of byte. Internally used to flag which members of a list are to be filled in persistence system operations. </Desc>
      </Type>
      <Type Name="TBoldClientID">
         <Summary>Identifies a client when communicating to a propagator</Summary>
         <Desc>ClientIDs are used when a client is talking to a propagator</Desc>
      </Type>
      <Type Name="TBoldCompareType">
         <Summary></Summary>
         <Desc>This enumerated type is used to indicate how the method <See Class="TBoldElement" Method="CompareToAs" Text="TBoldElement.CompareToAs"/> will compare its two parameters.
            <P>Not all TBoldElement will accept all <InlineCode>TBoldCompareType</InlineCode> values as parameters.</P>
         </Desc>
         <Enumeration>
            <EnumItem Name="ctDefault">
               <Desc>Use the default compare method.</Desc>
            </EnumItem>
            <EnumItem Name="ctAsDate">
               <Desc>Compares a datetime as date.</Desc>
            </EnumItem>
            <EnumItem Name="ctAsTime">
               <Desc>Compares a datetime as time.</Desc>
            </EnumItem>
            <EnumItem Name="ctAsString">
               <Desc>Compare character by character</Desc>
            </EnumItem>
            <EnumItem Name="ctAsText">
               <Desc>Compare case insensitive</Desc>
            </EnumItem>
            <EnumItem Name="ctAsAnsiString">
               <Desc>Handles national character in comparison</Desc>
            </EnumItem>
            <EnumItem Name="ctAsAnsiText">
               <Desc>As above, and case insensitive</Desc>
            </EnumItem>
         </Enumeration>
      </Type>
      <Type Name="TBoldDataBaseGenerationMode">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldDbType">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldExpression">
         <Summary></Summary>
         <Desc><InlineCode>TBoldExpression</InlineCode> is the type used for expressions passed to the expression evaluator in Bold. It is currently simply a string. </Desc>
      </Type>
      <Type Name="TBoldGetTimeEvent">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldJustNotifyEvent">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldLockManagerProgressEvent">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldLogType">
         <Summary>The type of message sent to a <See Interface="IBoldLogReceiver"/></Summary>
         <Desc>
            <UL>
               <LI><B>ltInfo</B> - The message is information only</LI>
               <LI><B>ltDetail</B> - the message contains detailed information</LI>
               <LI><B>ltWarning</B> - The message contains a warning</LI>
               <LI><B>ltError</B> - The message contains an error</LI>
               <LI><B>ltSeparator</B> - The message is a separator</LI>
            </UL>
         </Desc>
      </Type>
      <Type Name="TBoldModuleType">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldNotifyEventWithErrorMessage">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldOrientation">
         <Summary></Summary>
         <Desc>Used together with the form generator to indicate how a form should be oriented. </Desc>
         <Enumeration>
            <EnumItem Name="orHorizontal">
               <Desc>Form should have a horizontal layout</Desc>
            </EnumItem>
            <EnumItem Name="orVertical">
               <Desc>Form should have a vertical layout</Desc>
            </EnumItem>
            <EnumItem Name="orGrid">
               <Desc>Form should be laid out as a grid.</Desc>
            </EnumItem>
         </Enumeration>
      </Type>
      <Type Name="TBoldRepresentation">
         <Summary></Summary>
         <Desc>In Bold there are several places where a property, or method returning a value, takes a parameter indicating several possible values to return.
            <P><InlineCode>TBoldRepresentation</InlineCode> is the type for such parameters. It is actually just an integer, with a few values predefined as constants for some common cases.</P>
See also <See Class="TBoldElement" Property="StringRepresentation"/>. </Desc>
      </Type>
      <Type Name="TBoldRoleType">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldSQLStyle">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldStorage">
         <Summary></Summary>
         <Desc>Enumeration used to indicate storage location for attributes, classes and associations</Desc>
         <Enumeration>
            <EnumItem Name="bsInternal">
               <Desc>Means that the item is stored in a normal "boldaware" database and handled by a model-driven default PersistenceMapper</Desc>
            </EnumItem>
            <EnumItem Name="bsPartiallyExternal">
               <Desc>This value is only valid for classes, and means that the class is stored in two locations. Some parts of the obejct is stored in a "boldaware" database, and other parts are stored in an external database. This gives the possibility to extend a legacy class with new attributes</Desc>
            </EnumItem>
            <EnumItem Name="bsExternal">
               <Desc>The item is stored in an external database</Desc>
            </EnumItem>
            <EnumItem Name="bsExternalKey">
               <Desc>This value is only valid for attributes. It indicates that the attribute (possibly in combination with other attributes) is the identifying key for the object in an external database. </Desc>
            </EnumItem>
         </Enumeration>
      </Type>
      <Type Name="TBoldTimeStampType">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
      <Type Name="TBoldValuePersistenceState">
         <Summary></Summary>
         <Desc>The persistence state of a Bold member or Bold object reflects the relationship between its value in memory and in the persistent storage. It tells us which of the two is the most recent. The value of a Bold object is concidered to be its existence state.
            <P>If the state of a member or object is <InlineCode>bvpsInvalid</InlineCode> it means that the value in memory is not correct. It will be fetched automatically when it is needed. After the value has been fetched the state will become bvpsCurrent, meaning that the value in memory is the same as the value in the persistent storage. If the value is changed in memory the state will change to bvpsModified, implying that the new value should be written to the persistent storage. Finally, the bvpsTransient state tells us that the member or object only exists in memory.</P>
         </Desc>
      </Type>
      <Type Name="TBoldValuePersistenceStateSet">
         <Summary></Summary>
         <Desc></Desc>
      </Type>
   </Types>
</DLUnitDoc>